.\" -*- mode: troff; coding: utf-8 -*-
.\" Automatically generated by Pod::Man 5.0102 (Pod::Simple 3.45)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" \*(C` and \*(C' are quotes in nroff, nothing in troff, for use with C<>.
.ie n \{\
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "GCC 1"
.TH GCC 1 2025-04-25 gcc-15.1.1 GNU

.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh

.SH NAME

gcc \- GNU project C and C++ compiler

.SH SYNOPSIS
.IX Header "SYNOPSIS"

gcc [\fB\-c\fR|\fB\-S\fR|\fB\-E\fR] [\fB\-std=\fR\fIstandard\fR]
    [\fB\-g\fR] [\fB\-pg\fR] [\fB\-O\fR\fIlevel\fR]
    [\fB\-W\fR\fIwarn\fR...] [\fB\-Wpedantic\fR]
    [\fB\-I\fR\fIdir\fR...] [\fB\-L\fR\fIdir\fR...]
    [\fB\-D\fR\fImacro\fR[=\fIdefn\fR]...] [\fB\-U\fR\fImacro\fR]
    [\fB\-f\fR\fIoption\fR...] [\fB\-m\fR\fImachine-option\fR...]
    [\fB\-o\fR \fIoutfile\fR] [@\fIfile\fR] \fIinfile\fR...
.PP
Only the most useful options are listed here; see below for the
remainder.  \fBg++\fR accepts mostly the same options as \fBgcc\fR.

.SH DESCRIPTION
.IX Header "DESCRIPTION"

.IP \[bu] 3
When you invoke GCC, it normally does preprocessing, compilation,
assembly and linking.
.IP \[bu]
The "overall options" allow you to stop this
process at an intermediate stage.
.IP \[bu]
For example, the \fB\-c\fR option
says not to run the linker.
.IP \[bu]
Then the output consists of object files
output by the assembler.
.PP
-
.IP \[bu] 3
Other options are passed on to one or more stages of processing.
.IP \[bu]
Some options
control the preprocessor and others the compiler itself.
.IP \[bu]
Yet other
options control the assembler and linker; most of these are not
documented here, since you rarely need to use any of them.
.PP
-
.IP \[bu] 3
Most of the command-line options that you can use with GCC are useful
for C programs; when an option is only useful with another language
(usually C++), the explanation says so explicitly.
.IP \[bu]
If the description
for a particular option does not mention a source language, you can use
that option with all supported languages.
.PP
-
.IP \[bu] 3
The usual way to run GCC is to run the executable called \fBgcc\fR, or
\&\fImachine\fR\fB\-gcc\fR when cross-compiling, or
\&\fImachine\fR\fB\-gcc\-\fR\fIversion\fR to run a specific version of GCC.
.IP \[bu]
When you compile C++ programs, you should invoke GCC as \fBg++\fR
instead.
.PP
-
.IP \[bu] 3
The \fBgcc\fR program accepts options and file names as operands.
.IP \[bu]
Many
options have multi-letter names; therefore multiple single-letter options
may \fInot\fR be grouped: \fB\-dv\fR is very different from \fB\-d\ \-v\fR.
.PP
-
.IP \[bu] 3
You can mix options and other arguments.
.IP \[bu]
For the most part, the order
you use doesn't matter.
.IP \[bu]
Order does matter when you use several
options of the same kind; for example, if you specify \fB\-L\fR more
than once, the directories are searched in the order specified.
.IP \[bu]
Also,
the placement of the \fB\-l\fR option is significant.
.PP
-
.IP \[bu] 3
Many options have long names starting with \fB\-f\fR or with
\&\fB\-W\fR\-\-\-for example,
\&\fB\-fmove\-loop\-invariants\fR, \fB\-Wformat\fR and so on.
.IP \[bu]
Most of
these have both positive and negative forms; the negative form of
\&\fB\-ffoo\fR is \fB\-fno\-foo\fR.
.IP \[bu]
This manual documents
only one of these two forms, whichever one is not the default.
.PP
-
.IP \[bu] 3
Some options take one or more arguments typically separated either
by a space or by the equals sign (\fB=\fR) from the option name.
.IP \[bu]
Unless documented otherwise, an argument can be either numeric or
a string.
.IP \[bu]
Numeric arguments must typically be small unsigned decimal
or hexadecimal integers.
.IP \[bu]
Hexadecimal arguments must begin with
the \fB0x\fR prefix.
.IP \[bu]
Arguments to options that specify a size
threshold of some sort may be arbitrarily large decimal or hexadecimal
integers followed by a byte size suffix designating a multiple of bytes
such as \f(CW\*(C`kB\*(C'\fR and \f(CW\*(C`KiB\*(C'\fR for kilobyte and kibibyte, respectively,
\&\f(CW\*(C`MB\*(C'\fR and \f(CW\*(C`MiB\*(C'\fR for megabyte and mebibyte, \f(CW\*(C`GB\*(C'\fR and
\&\f(CW\*(C`GiB\*(C'\fR for gigabyte and gigibyte, and so on.
.IP \[bu]
Such arguments are
designated by \fIbyte-size\fR in the following text.
.IP \[bu]
Refer to the NIST,
IEC, and other relevant national and international standards for the full
listing and explanation of the binary and decimal byte size prefixes.

.SH OPTIONS
.IX Header "OPTIONS"

.SS "Options That Control Optimization"
.IX Subsection "Options That Control Optimization"

.IP \[bu] 3
These options control various sorts of optimizations.
.PP
-
.IP \[bu] 3
Without any optimization option, the compiler's goal is to reduce the
cost of compilation and to make debugging produce the expected
results.
.IP \[bu]
Statements are independent: if you stop the program with a
breakpoint between statements, you can then assign a new value to any
variable or change the program counter to any other statement in the
function and get exactly the results you expect from the source
code.
.PP
-
.IP \[bu] 3
Turning on optimization flags makes the compiler attempt to improve
the performance and/or code size at the expense of compilation time
and possibly the ability to debug the program.
.PP
-
.IP \[bu] 3
The compiler performs optimization based on the knowledge it has of the
program.
.IP \[bu]
Compiling multiple files at once to a single output file mode allows
the compiler to use information gained from all of the files when compiling
each of them.
.PP
-
.IP \[bu] 3
Not all optimizations are controlled directly by a flag.
.IP \[bu]
Only
optimizations that have a flag are listed in this section.
.PP
-
.IP \[bu] 3
Most optimizations are completely disabled at \fB\-O0\fR or if an
\&\fB\-O\fR level is not set on the command line, even if individual
optimization flags are specified.
.IP \[bu]
Similarly, \fB\-Og\fR suppresses
many optimization passes.
.PP
-
.IP \[bu] 3
Depending on the target and how GCC was configured, a slightly different
set of optimizations may be enabled at each \fB\-O\fR level than
those listed here.
.IP \[bu]
You can invoke GCC with \fB\-Q \-\-help=optimizers\fR
to find out the exact set of optimizations that are enabled at each level.
.IP \fB\-O\fR 4
.IX Item "-O"
.PD 0
.IP \fB\-O1\fR 4
.IX Item "-O1"
.PD
.RS
.IP \[bu] 3
Optimize.
.IP \[bu]
Optimizing compilation takes somewhat more time, and a lot
more memory for a large function.
.P
-
.IP \[bu] 3
With \fB\-O\fR, the compiler tries to reduce code size and execution
time, without performing any optimizations that take a great deal of
compilation time.
.P
-
.IP \[bu] 3
\&\fB\-O\fR is the recommended optimization level for large machine-generated
code as a sensible balance between time taken to compile and memory use:
higher optimization levels perform optimizations with greater algorithmic
complexity than at \fB\-O\fR.
.IP \[bu]
\&\fB\-O\fR turns on the following optimization flags:
.P
-
\&\fB\-fauto\-inc\-dec
\&\-fbranch\-count\-reg
\&\-fcombine\-stack\-adjustments
\&\-fcompare\-elim
\&\-fcprop\-registers
\&\-fdce
\&\-fdefer\-pop
\&\-fdelayed\-branch
\&\-fdse
\&\-fforward\-propagate
\&\-fguess\-branch\-probability
\&\-fif\-conversion
\&\-fif\-conversion2
\&\-finline\-functions\-called\-once
\&\-fipa\-modref
\&\-fipa\-profile
\&\-fipa\-pure\-const
\&\-fipa\-reference
\&\-fipa\-reference\-addressable
\&\-fivopts
\&\-fmerge\-constants
\&\-fmove\-loop\-invariants
\&\-fmove\-loop\-stores
\&\-fomit\-frame\-pointer
\&\-freorder\-blocks
\&\-fshrink\-wrap
\&\-fshrink\-wrap\-separate
\&\-fsplit\-wide\-types
\&\-fssa\-backprop
\&\-fssa\-phiopt
\&\-ftree\-bit\-ccp
\&\-ftree\-ccp
\&\-ftree\-ch
\&\-ftree\-coalesce\-vars
\&\-ftree\-copy\-prop
\&\-ftree\-dce
\&\-ftree\-dominator\-opts
\&\-ftree\-dse
\&\-ftree\-forwprop
\&\-ftree\-fre
\&\-ftree\-phiprop
\&\-ftree\-pta
\&\-ftree\-scev\-cprop
\&\-ftree\-sink
\&\-ftree\-slsr
\&\-ftree\-sra
\&\-ftree\-ter
\&\-funit\-at\-a\-time\fR
.RE

.IP \fB\-O2\fR 4
.IX Item "-O2"
.RS
.IP \[bu] 3
Optimize even more.
.IP \[bu]
GCC performs nearly all supported optimizations
that do not involve a space-speed tradeoff.
.IP \[bu]
As compared to \fB\-O\fR, this option increases both compilation time
and the performance of the generated code.
.P
-
.IP \[bu] 3
\&\fB\-O2\fR turns on all optimization flags specified by \fB\-O1\fR.
.IP \[bu]
It
also turns on the following optimization flags:
.P
-
\&\fB\-falign\-functions  \-falign\-jumps
\&\-falign\-labels  \-falign\-loops
\&\-fcaller\-saves
\&\-fcode\-hoisting
\&\-fcrossjumping
\&\-fcse\-follow\-jumps  \-fcse\-skip\-blocks
\&\-fdelete\-null\-pointer\-checks
\&\-fdevirtualize  \-fdevirtualize\-speculatively
\&\-fexpensive\-optimizations
\&\-ffinite\-loops
\&\-fgcse  \-fgcse\-lm
\&\-fhoist\-adjacent\-loads
\&\-finline\-functions
\&\-finline\-small\-functions
\&\-findirect\-inlining
\&\-fipa\-bit\-cp  \-fipa\-cp  \-fipa\-icf
\&\-fipa\-ra  \-fipa\-sra  \-fipa\-vrp
\&\-fisolate\-erroneous\-paths\-dereference
\&\-flra\-remat
\&\-foptimize\-crc
\&\-foptimize\-sibling\-calls
\&\-foptimize\-strlen
\&\-fpartial\-inlining
\&\-fpeephole2
\&\-freorder\-blocks\-algorithm=stc
\&\-freorder\-blocks\-and\-partition  \-freorder\-functions
\&\-frerun\-cse\-after\-loop
\&\-fschedule\-insns  \-fschedule\-insns2
\&\-fsched\-interblock  \-fsched\-spec
\&\-fstore\-merging
\&\-fstrict\-aliasing
\&\-fthread\-jumps
\&\-ftree\-builtin\-call\-dce
\&\-ftree\-loop\-vectorize
\&\-ftree\-pre
\&\-ftree\-slp\-vectorize
\&\-ftree\-switch\-conversion  \-ftree\-tail\-merge
\&\-ftree\-vrp
\&\-fvect\-cost\-model=very\-cheap\fR
.IP \[bu] 3
Please note the warning under \fB\-fgcse\fR about
invoking \fB\-O2\fR on programs that use computed gotos.
.RE

.IP \fB\-O3\fR 4
.IX Item "-O3"
.RS
.IP \[bu] 3
Optimize yet more.
.IP \[bu]
\fB\-O3\fR turns on all optimizations specified
by \fB\-O2\fR and also turns on the following optimization flags:
.P
-
\&\fB\-fgcse\-after\-reload
\&\-fipa\-cp\-clone
\&\-floop\-interchange
\&\-floop\-unroll\-and\-jam
\&\-fpeel\-loops
\&\-fpredictive\-commoning
\&\-fsplit\-loops
\&\-fsplit\-paths
\&\-ftree\-loop\-distribution
\&\-ftree\-partial\-pre
\&\-funswitch\-loops
\&\-fvect\-cost\-model=dynamic
\&\-fversion\-loops\-for\-strides\fR
.RE

.IP \fB\-fsanitize=address\fR 4
.IX Item "-fsanitize=address"
.RS
.IP \[bu] 3
Enable AddressSanitizer, a fast memory error detector.
.IP \[bu]
Memory access instructions are instrumented to detect
out-of-bounds and use-after-free bugs.
.IP \[bu]
The option enables \fB\-fsanitize\-address\-use\-after\-scope\fR.
.IP \[bu]
See <\fBhttps://github.com/google/sanitizers/wiki/AddressSanitizer\fR> for
more details.
.IP \[bu]
The run-time behavior can be influenced using the
\&\fBASAN_OPTIONS\fR environment variable.
.IP \[bu]
When set to \f(CW\*(C`help=1\*(C'\fR,
the available options are shown at startup of the instrumented program.
.IP \[bu]
See
<\fBhttps://github.com/google/sanitizers/wiki/AddressSanitizerFlags#run\-time\-flags\fR>
for a list of supported options.
.IP \[bu]
The option cannot be combined with \fB\-fsanitize=thread\fR or
\&\fB\-fsanitize=hwaddress\fR.
.IP \[bu]
Note that the only targets
\&\fB\-fsanitize=hwaddress\fR is currently supported on are x86\-64
(only with \f(CW\*(C`\-mlam=u48\*(C'\fR or \f(CW\*(C`\-mlam=u57\*(C'\fR options) and AArch64,
in both cases only in ABIs with 64\-bit pointers.
.P
-
.IP \[bu] 3
When compiling with \fB\-fsanitize=address\fR, you should also
use \fB\-g\fR to produce more meaningful output.
.IP \[bu]
To get more accurate stack traces, it is possible to use options such as
\&\fB\-O0\fR, \fB\-O1\fR, or \fB\-Og\fR (which, for instance, prevent
most function inlining), \fB\-fno\-optimize\-sibling\-calls\fR (which prevents
optimizing sibling and tail recursive calls; this option is implicit for
\&\fB\-O0\fR, \fB\-O1\fR, or \fB\-Og\fR), or \fB\-fno\-ipa\-icf\fR (which
disables Identical Code Folding for functions).
.IP \[bu]
Using \fB\-fno\-omit\-frame\-pointer\fR also improves stack traces.
.IP \[bu]
Since multiple runs of the
program may yield backtraces with different addresses due to ASLR (Address
Space Layout Randomization), it may be desirable to turn ASLR off.
.IP \[bu]
On Linux,
this can be achieved with \fBsetarch `uname \-m` \-R ./prog\fR.

.SS "Options Controlling the Preprocessor"
.IX Subsection "Options Controlling the Preprocessor"

.IP \[bu] 3
These options control the C preprocessor, which is run on each C source
file before actual compilation.
.PP
-
.IP \[bu] 3
If you use the \fB\-E\fR option, nothing is done except preprocessing.
.IP \[bu]
Some of these options make sense only together with \fB\-E\fR because
they cause the preprocessor output to be unsuitable for actual
compilation.
.PP
-
.IP \[bu] 3
In addition to the options listed here, there are a number of options
to control search paths for include files documented in
\&\fBDirectory Options\fR.
.IP \[bu]
Options to control preprocessor diagnostics are listed in
\&\fBWarning Options\fR.

.IP \fB\-M\fR 4
.IX Item "-M"
.RS
.IP \[bu] 3
Instead of outputting the result of preprocessing, output a rule
suitable for \fBmake\fR describing the dependencies of the main
source file.
.IP \[bu]
The preprocessor outputs one \fBmake\fR rule containing
the object file name for that source file, a colon, and the names of all
the included files, including those coming from \fB\-include\fR or
\&\fB\-imacros\fR command-line options.
.P
-
.IP \[bu] 3
Unless specified explicitly (with \fB\-MT\fR or \fB\-MQ\fR), the
object file name consists of the name of the source file with any
suffix replaced with object file suffix and with any leading directory
parts removed.
.IP \[bu]
If there are many included files then the rule is
split into several lines using \fB\e\fR\-newline.
.IP \[bu]
The rule has no
commands.
.P
-
.IP \[bu] 3
This option does not suppress the preprocessor's debug output, such as
\&\fB\-dM\fR.
.IP \[bu]
To avoid mixing such debug output with the dependency
rules you should explicitly specify the dependency output file with
\&\fB\-MF\fR, or use an environment variable like
\&\fBDEPENDENCIES_OUTPUT\fR.
.IP \[bu] 3
Debug output
is still sent to the regular output stream as normal.
.P
-
.IP \[bu] 3
Passing \fB\-M\fR to the driver implies \fB\-E\fR, and suppresses
warnings with an implicit \fB\-w\fR.
.RE

.IP \fB\-MM\fR 4
.IX Item "-MM"
.RS
.IP \[bu] 3
Like \fB\-M\fR but do not mention header files that are found in
system header directories, nor header files that are included,
directly or indirectly, from such a header.
.P
-
.IP \[bu] 3
This implies that the choice of angle brackets or double quotes in an
\&\fB#include\fR directive does not in itself determine whether that
header appears in \fB\-MM\fR dependency output.
.RE

.IP "\fB\-MF\fR \fIfile\fR" 4
.IX Item "-MF file"
.RS
.IP \[bu] 3
When used with \fB\-M\fR or \fB\-MM\fR, specifies a
file to write the dependencies to.
.IP \[bu]
If no \fB\-MF\fR switch is given
the preprocessor sends the rules to the same place it would send
preprocessed output.
.P
-
.IP \[bu] 3
When used with the driver options \fB\-MD\fR or \fB\-MMD\fR,
\&\fB\-MF\fR overrides the default dependency output file.
.P
-
.IP \[bu]
If \fIfile\fR is \fI\-\fR, then the dependencies are written to \fIstdout\fR.
.RE

.IP "\fB\-MT\fR \fItarget\fR" 4
.IX Item "-MT target"
.RS
.IP \[bu] 3
Change the target of the rule emitted by dependency generation.
.IP \[bu]
By
default CPP takes the name of the main input file, deletes any
directory components and any file suffix such as \fB.c\fR, and
appends the platform's usual object suffix.
.IP \[bu]
The result is the target.
.P
-
.IP \[bu] 3
An \fB\-MT\fR option sets the target to be exactly the string you
specify.
.IP \[bu]
If you want multiple targets, you can specify them as a single
argument to \fB\-MT\fR, or use multiple \fB\-MT\fR options.
.P
-
.IP \[bu] 3
For example, \fB\-MT\ '$(objpfx)foo.o'\fR might give
.Sp
.Vb 1
\&        $(objpfx)foo.o: foo.c
.Ve

.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBgpl\fR\|(7), \fBgfdl\fR\|(7), \fBfsf\-funding\fR\|(7),
\&\fBcpp\fR\|(1), \fBgcov\fR\|(1), \fBas\fR\|(1), \fBld\fR\|(1), \fBgdb\fR\|(1)
and the Info entries for \fIgcc\fR, \fIcpp\fR, \fIas\fR,
\&\fIld\fR, \fIbinutils\fR and \fIgdb\fR.

.SH AUTHOR
.IX Header "AUTHOR"
See the Info entry for \fBgcc\fR, or
<\fBhttps://gcc.gnu.org/onlinedocs/gcc/Contributors.html\fR>,
for contributors to GCC.

.SH COPYRIGHT
.IX Header "COPYRIGHT"
Copyright (c) 1988\-2025 Free Software Foundation, Inc.
.PP
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "GNU General Public License" and "Funding
Free Software", the Front-Cover texts being (a) (see below), and with
the Back-Cover Texts being (b) (see below).  A copy of the license is
included in the \fBgfdl\fR\|(7) man page.
.PP
(a) The FSF's Front-Cover Text is:
.PP
.Vb 1
\&     A GNU Manual
.Ve
.PP
(b) The FSF's Back-Cover Text is:
.PP
.Vb 3
\&     You have freedom to copy and modify this GNU Manual, like GNU
\&     software.  Copies published by the Free Software Foundation raise
\&     funds for GNU development.
.Ve
