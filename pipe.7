.\" Copyright (C) 2005 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.TH PIPE 7 2017-09-15 "Linux" "Linux Programmer's Manual"

.SH NAME

pipe \- overview of pipes and FIFOs

.SH DESCRIPTION

.IP \[bu] 3
Pipes and FIFOs (also known as named pipes)
provide a unidirectional interprocess communication channel.
.IP \[bu]
A pipe has a
.I read end
and a
.IR "write end" .
.IP \[bu]
Data written to the write end of a pipe can be read
from the read end of the pipe.
.P
-
.IP \[bu] 3
A pipe is created using
.BR pipe (2),
which creates a new pipe and returns two file descriptors,
one referring to the read end of the pipe,
the other referring to the write end.
.IP \[bu]
Pipes can be used to create a communication channel between related
processes; see
.BR pipe (2)
for an example.
.P
-
.IP \[bu] 3
A FIFO (short for First In First Out) has a name within the filesystem
(created using
.BR mkfifo (3)),
and is opened using
.BR open (2).
.IP \[bu]
Any process may open a FIFO, assuming the file permissions allow it.
.IP \[bu]
The read end is opened using the
.B O_RDONLY
flag; the write end is opened using the
.B O_WRONLY
flag.
.IP \[bu]
See
.BR fifo (7)
for further details.
.IP \[bu]
.IR Note :
although FIFOs have a pathname in the filesystem,
I/O on FIFOs does not involve operations on the underlying device
(if there is one).

.SS I/O on pipes and FIFOs

.IP \[bu] 3
The only difference between pipes and FIFOs is the manner in which
they are created and opened.
.IP \[bu]
Once these tasks have been accomplished,
I/O on pipes and FIFOs has exactly the same semantics.
.P
-
.IP \[bu] 3
If a process attempts to read from an empty pipe, then
.BR read (2)
will block until data is available.
.IP \[bu]
If a process attempts to write to a full pipe (see below), then
.BR write (2)
blocks until sufficient data has been read from the pipe
to allow the write to complete.
.IP \[bu]
Nonblocking I/O is possible by using the
.BR fcntl (2)
.B F_SETFL
operation to enable the
.B O_NONBLOCK
open file status flag.
.P
-
.IP \[bu] 3
The communication channel provided by a pipe is a
.IR "byte stream" :
there is no concept of message boundaries.
.P
-
.IP \[bu] 3
If all file descriptors referring to the write end of a pipe
have been closed, then an attempt to
.BR read (2)
from the pipe will see end-of-file
.RB ( read (2)
will return 0).
.IP \[bu]
If all file descriptors referring to the read end of a pipe
have been closed, then a
.BR write (2)
will cause a
.B SIGPIPE
signal to be generated for the calling process.
.IP \[bu]
If the calling process is ignoring this signal, then
.BR write (2)
fails with the error
.BR EPIPE .
.IP \[bu]
An application that uses
.BR pipe (2)
and
.BR fork (2)
should use suitable
.BR close (2)
calls to close unnecessary duplicate file descriptors;
this ensures that end-of-file and
.BR SIGPIPE / EPIPE
are delivered when appropriate.
.P
-
.IP \[bu] 3
It is not possible to apply
.BR lseek (2)
to a pipe.

.SS Pipe capacity

.IP \[bu] 3
A pipe has a limited capacity.
.IP \[bu]
If the pipe is full, then a
.BR write (2)
will block or fail, depending on whether the
.B O_NONBLOCK
flag is set (see below).
.IP \[bu]
Different implementations have different limits for the pipe capacity.
.IP \[bu]
Applications should not rely on a particular capacity:
an application should be designed so that a reading process consumes data
as soon as it is available,
so that a writing process does not remain blocked.
.P
-
.IP \[bu] 3
In Linux versions before 2.6.11, the capacity of a pipe was the same as
the system page size (e.g., 4096 bytes on i386).
.IP \[bu]
Since Linux 2.6.11, the pipe capacity is 16 pages
(i.e., 65,536 bytes in a system with a page size of 4096 bytes).
.IP \[bu]
Since Linux 2.6.35, the default pipe capacity is 16 pages,
but the capacity can be queried and set using the
.BR fcntl (2)
.BR F_GETPIPE_SZ
and
.BR F_SETPIPE_SZ
operations.
.IP \[bu]
See
.BR fcntl (2)
for more information.
.P
-
.IP \[bu] 3
The following
.BR ioctl (2)
operation, which can be applied to a file descriptor
that refers to either end of a pipe,
places a count of the number of unread bytes in the pipe in the
.I int
buffer pointed to by the final argument of the call:
.PP
    ioctl(fd, FIONREAD, &nbytes);
.PP
.IP \[bu] 3
The
.B FIONREAD
operation is not specified in any standard,
but is provided on many implementations.

.\"
.SS /proc files

.IP \[bu] 3
On Linux, the following files control how much memory can be used for pipes:

.TP
.IR /proc/sys/fs/pipe-max-pages " (only in Linux 2.6.34)"
.\" commit b492e95be0ae672922f4734acf3f5d35c30be948
.RS
.IP \[bu] 3
An upper limit, in pages, on the capacity that an unprivileged user
(one without the
.BR CAP_SYS_RESOURCE
capability)
can set for a pipe.
.P
-
.IP \[bu] 3
The default value for this limit is 16 times the default pipe capacity
(see above); the lower limit is two pages.
.P
-
.IP \[bu] 3
This interface was removed in Linux 2.6.35, in favor of
.IR /proc/sys/fs/pipe-max-size .
.RE

.TP
.IR /proc/sys/fs/pipe-max-size " (since Linux 2.6.35)"
.\" commit ff9da691c0498ff81fdd014e7a0731dab2337dac
.RS
.IP \[bu] 3
The maximum size (in bytes) of individual pipes that can be set
.\" This limit is not checked on pipe creation, where the capacity is
.\" always PIPE_DEF_BUFS, regardless of pipe-max-size
by users without the
.B CAP_SYS_RESOURCE
capability.
.IP \[bu]
The value assigned to this file may be rounded upward,
to reflect the value actually employed for a convenient implementation.
.IP \[bu]
To determine the rounded-up value,
display the contents of this file after assigning a value to it.
.P
-
.IP \[bu] 3
The default value for this file is 1048576 (1\ MiB).
.IP \[bu]
The minimum value that can be assigned to this file is the system page size.
.IP \[bu]
Attempts to set a limit less than the page size cause
.BR write (2)
to fail with the error
.BR EINVAL .
.P
-
.IP \[bu] 3
Since Linux 4.9,
.\" commit 086e774a57fba4695f14383c0818994c0b31da7c
the value on this file also acts as a ceiling on the default capacity
of a new pipe or newly opened FIFO.
.RE

.TP
.IR /proc/sys/fs/pipe-user-pages-hard " (since Linux 4.5)"
.\" commit 759c01142a5d0f364a462346168a56de28a80f52
.RS
.IP \[bu] 3
The hard limit on the total size (in pages) of all pipes created or set by
a single unprivileged user (i.e., one with neither the
.B CAP_SYS_RESOURCE
nor the
.B CAP_SYS_ADMIN
capability).
.IP \[bu]
So long as the total number of pages allocated to pipe buffers
for this user is at this limit,
attempts to create new pipes will be denied,
and attempts to increase a pipe's capacity will be denied.
.P
-
.IP \[bu] 3
When the value of this limit is zero (which is the default),
no hard limit is applied.
.\" The default was chosen to avoid breaking existing applications that
.\" make intensive use of pipes (e.g., for splicing).
.RE

.TP
.IR /proc/sys/fs/pipe-user-pages-soft " (since Linux 4.5)"
.\" commit 759c01142a5d0f364a462346168a56de28a80f52
.IP \[bu] 3
The soft limit on the total size (in pages) of all pipes created or set by
a single unprivileged user (i.e., one with neither the
.B CAP_SYS_RESOURCE
nor the
.B CAP_SYS_ADMIN
capability).
.IP \[bu]
So long as the total number of pages allocated to pipe buffers
for this user is at this limit,
individual pipes created by a user will be limited to one page,
and attempts to increase a pipe's capacity will be denied.
.IP \[bu]
When the value of this limit is zero, no soft limit is applied.
.IP \[bu]
The default value for this file is 16384,
which permits creating up to 1024 pipes with the default capacity.
.P
-
.IP \[bu] 3
Before Linux 4.9, some bugs affected the handling of the
.IR pipe-user-pages-soft
and
.IR pipe-user-pages-hard
limits; see BUGS.

.\"
.SS PIPE_BUF

.IP \[bu] 3
POSIX.1 says that
.BR write (2)s
of less than
.B PIPE_BUF
bytes must be atomic: the output data is written to the pipe as a
contiguous sequence.
.IP \[bu]
Writes of more than
.B PIPE_BUF
bytes may be nonatomic: the kernel may interleave the data
with data written by other processes.
.IP \[bu]
POSIX.1 requires
.B PIPE_BUF
to be at least 512 bytes.
.IP \[bu]
(On Linux,
.B PIPE_BUF
is 4096 bytes.)
.IP \[bu]
The precise semantics depend on whether the file descriptor is nonblocking
.RB ( O_NONBLOCK ),
whether there are multiple writers to the pipe, and on
.IR n ,
the number of bytes to be written:

.TP
\fBO_NONBLOCK\fP disabled, \fIn\fP <= \fBPIPE_BUF\fP
.RS
.IP \[bu] 3
All
.I n
bytes are written atomically;
.BR write (2)
may block if there is not room for
.I n
bytes to be written immediately
.RE

.TP
\fBO_NONBLOCK\fP enabled, \fIn\fP <= \fBPIPE_BUF\fP
.RS
.IP \[bu] 3
If there is room to write
.I n
bytes to the pipe, then
.BR write (2)
succeeds immediately, writing all
.I n
bytes; otherwise
.BR write (2)
fails, with
.I errno
set to
.BR EAGAIN .
.RE

.TP
\fBO_NONBLOCK\fP disabled, \fIn\fP > \fBPIPE_BUF\fP
.RS
.IP \[bu] 3
The write is nonatomic: the data given to
.BR write (2)
may be interleaved with
.BR write (2)s
by other process;
the
.BR write (2)
blocks until
.I n
bytes have been written.
.RE

.TP
\fBO_NONBLOCK\fP enabled, \fIn\fP > \fBPIPE_BUF\fP
.RS
.IP \[bu] 3
If the pipe is full, then
.BR write (2)
fails, with
.I errno
set to
.BR EAGAIN .
.IP \[bu]
Otherwise, from 1 to
.I n
bytes may be written (i.e., a "partial write" may occur;
the caller should check the return value from
.BR write (2)
to see how many bytes were actually written),
and these bytes may be interleaved with writes by other processes.

.SS Open file status flags

.IP \[bu] 3
The only open file status flags that can be meaningfully applied to
a pipe or FIFO are
.B O_NONBLOCK
and
.BR O_ASYNC .
.P
-
.IP \[bu] 3
Setting the
.B O_ASYNC
flag for the read end of a pipe causes a signal
.RB ( SIGIO
by default) to be generated when new input becomes available on the pipe.
The target for delivery of signals must be set using the
.BR fcntl (2)
.B F_SETOWN
command.
.IP \[bu]
On Linux,
.B O_ASYNC
is supported for pipes and FIFOs only since kernel 2.6.

.SS Portability notes

.IP \[bu] 3
On some systems (but not Linux), pipes are bidirectional:
data can be transmitted in both directions between the pipe ends.
.IP \[bu]
POSIX.1 requires only unidirectional pipes.
.IP \[bu]
Portable applications should avoid reliance on
bidirectional pipe semantics.

.SH SEE ALSO

.BR mkfifo (1),
.BR dup (2),
.BR fcntl (2),
.BR open (2),
.BR pipe (2),
.BR poll (2),
.BR select (2),
.BR socketpair (2),
.BR splice (2),
.BR stat (2),
.BR tee (2),
.BR vmsplice (2),
.BR mkfifo (3),
.BR epoll (7),
.BR fifo (7)

.SH COLOPHON

.IP \[bu] 3
This page is part of release 5.10 of the Linux
.I man-pages
project.
.IP \[bu]
A description of the project,
information about reporting bugs,
and the latest version of this page,
can be found at
\%https://www.kernel.org/doc/man\-pages/.
